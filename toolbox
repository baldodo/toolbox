#!/bin/bash

# custom shell prompt, history date, hostfile ; uncomment to enable
#    PS1="\[\e[34m\]\u@\h\[\e[0m\]: \w\n(\!)\$> "
#    HISTTIMEFORMAT="%F %T "
#    HOSTFILE="$HOME/.hosts"

complete -F _user_at_host ssh
shopt -s extglob

toolbox()
{
    echo "mkcd dir_name     => mkdir & cd"
    echo "push dir_name     => ajoute dir_name dans la liste"
    echo "pop 3             => retire le 3eme dir de la liste"
    echo "up home           => remonte jusqu'à un répertoire home"
    echo "up 4              => remonte de 4 répertoire"
    echo "down tmp          => descend au premier répertoire tmp"
    echo "zsize file.gz     => taille décompressée de file.gz"
    echo "zerodir dir_name  => trouve les répertoires vides dans dir_name"
    echo "zerofile dir_name => trouve les fichiers vides dans dir_name"
    echo "zdu dir_name      => donne la taille totale des fichiers de dir_name"
}
push()
{
   if [ $# -eq 0 ]
      then dirs -v; return
   fi
   local dest="$1"
   if ! [ -d "$dest" ]
      then echo "$dest introuvable" > /dev/stderr
      return
   fi
   pushd -n "$(realpath "$dest")" > /dev/null
   dirs -v
}
pop()
{
   if [ $# -eq 0 ]
      then dirs -v; return
   fi
   local number="$1"
   case "$number" in
      +([0-9])) popd -n +"$number" > /dev/null ;;
             *) echo "usage: pop {number}" > /dev/stderr ;;
   esac
   dirs -v
}

upd()
{
   looked="$1"
   local p base
   p="$PWD"
   base="${p/*\//}"
   while [ "$base" != "$looked" ]
   do
      p=${p%\/*}
      base="${p/*\//}"
      [ -n "$base" ] || break
   done
   [ -n "$p" ] && cd "$p" || return
}
up()
{
   local number="$1"
   case "$number" in
      +([0-9])) for((i=0;i<number;i++))
                do
                   cd .. || return
                done ;;
             *) upd "$number" ;;
   esac
}

down()
{
   [ $# -ne 0 ] || return
   item="$1"
   local found=$(find . -type d -name "$item" 2>/dev/null)
   local number=$(echo -n "$found" | nl | wc -l)
   if [ $number -eq 0 ]
   then echo "$item not found"
   elif [ $number -eq 1 ]
   then cd $(echo "$found" | sed -n "${number}p")
   else
      while true
      do
         echo "$found" | nl
         read -p "? " answer
         case "$answer" in
             [1-9]) 
               if [ "$answer" -le $number ]
                  then cd $(echo "$found" | sed -n "${answer}p") || return
                  break
               fi ;;
            *) echo "please enter a digit" ;;
         esac
      done
   fi
}
zsize()
{
   local file="$1"
   if ! [ -f "$file" ]
      then echo "$file is not a file"; return
   fi
   local filetype
   filetype="$(file -b "$file" | cut -d , -f1)"
   case "$filetype" in 
      "gzip compressed data")
         echo "$(gzip -l "$file" | awk 'NR==2{print $2}') $file" ;;
      "Zip archive data")
         echo "$(zipinfo -t "$file" | cut -d ' ' -f3) $file" ;;
      *) stat -c '%s %n' "$file" ;;
   esac
}
zerodir()
{
   local dir='.'
   if [ $# -ne 0 ]
      then dir="$1"
   fi
   if ! [ -d "$dir" ]
      then echo "$dir is not a directory"; return
   fi
   find "$dir" -type d | while read -r line
   do
      zdu "$line" | sed -n '/^0 /p'
   done
}
alias 0dir=zerodir
zerofile()
{
   local dir='.'
   if [ $# -ne 0 ]
      then dir="$1"
   fi
   if ! [ -d "$dir" ]
      then echo "$dir is not a directory"; return
   fi
   find "$dir" -type f | while read -r line
   do
      zsize "$line" | sed -n '/^0 /p'
   done
}
alias 0file=zerofile
zdu()
{
   local dir='.'
   if [ $# -ne 0 ]
      then dir="$1"
   fi
   if ! [ -d "$dir" ]
      then echo "$dir is not a directory"; return
   fi
   echo "$( (find "$dir" -type f | while read -r line
   do
      zsize "$line"
   done; echo 0 ) | awk '{total+=$1}END{print total}' ) $dir"
}
mkcd() {
   mkdir -p "$1" && cd "$1" || return
}
